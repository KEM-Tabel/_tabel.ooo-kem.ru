<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Монитор производительности</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .performance-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .performance-table th, .performance-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        .performance-table th {
            background: #4a90e2;
            color: white;
        }
        .performance-table tr:hover {
            background: #f8f9fa;
        }
        .time-cell {
            font-family: monospace;
        }
        .controls {
            margin-bottom: 20px;
        }
        button {
            padding: 8px 16px;
            background: #4a90e2;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background: #357abd;
        }
        .status {
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
        }
        .status.active {
            background: #d4edda;
            color: #155724;
        }
        .status.inactive {
            background: #f8d7da;
            color: #721c24;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Монитор производительности</h1>
        
        <div class="controls">
            <button id="startMonitoring">Начать мониторинг</button>
            <button id="stopMonitoring">Остановить мониторинг</button>
            <button id="clearData">Очистить данные</button>
            <div id="status" class="status inactive">Мониторинг неактивен</div>
        </div>

        <table class="performance-table">
            <thead>
                <tr>
                    <th>Функция</th>
                    <th>Время выполнения</th>
                    <th>Последний вызов</th>
                    <th>Количество вызовов</th>
                    <th>Среднее время</th>
                </tr>
            </thead>
            <tbody id="performanceData">
            </tbody>
        </table>
    </div>

    <script>
        class PerformanceMonitor {
            constructor() {
                this.data = new Map();
                this.isMonitoring = false;
                this.originalFunctions = new Map();
            }

            start() {
                if (this.isMonitoring) return;
                this.isMonitoring = true;
                document.getElementById('status').className = 'status active';
                document.getElementById('status').textContent = 'Мониторинг активен';
            }

            stop() {
                this.isMonitoring = false;
                document.getElementById('status').className = 'status inactive';
                document.getElementById('status').textContent = 'Мониторинг неактивен';
            }

            clear() {
                this.data.clear();
                this.updateTable();
            }

            wrapFunction(fn, functionName) {
                if (this.originalFunctions.has(fn)) {
                    return this.originalFunctions.get(fn);
                }

                const wrapped = (...args) => {
                    if (!this.isMonitoring) {
                        return fn.apply(this, args);
                    }

                    const start = performance.now();
                    const result = fn.apply(this, args);
                    const end = performance.now();
                    const executionTime = end - start;

                    this.recordExecution(functionName, executionTime);
                    return result;
                };

                this.originalFunctions.set(fn, wrapped);
                return wrapped;
            }

            recordExecution(functionName, executionTime, timestamp = Date.now()) {
    if (!this.data.has(functionName)) {
        this.data.set(functionName, {
            calls: 0,
            totalTime: 0,
            lastCall: new Date(timestamp),
            lastExecutionTime: 0
        });
    }

    const stats = this.data.get(functionName);
    stats.calls++;
    stats.totalTime += executionTime;
    stats.lastCall = new Date(timestamp);
    stats.lastExecutionTime = executionTime;

                    this.updateTable();
                }

            updateTable() {
                const tbody = document.getElementById('performanceData');
                tbody.innerHTML = '';

                for (const [functionName, stats] of this.data) {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${functionName}</td>
                        <td class="time-cell">${stats.lastExecutionTime.toFixed(2)}мс</td>
                        <td>${stats.lastCall.toLocaleTimeString()}</td>
                        <td>${stats.calls}</td>
                        <td class="time-cell">${(stats.totalTime / stats.calls).toFixed(2)}мс</td>
                    `;
                    tbody.appendChild(row);
                }
            }
        }

        // Создаем глобальный экземпляр монитора
        window.performanceMonitor = new PerformanceMonitor();

        // Добавляем обработчики для кнопок
        document.getElementById('startMonitoring').addEventListener('click', () => {
            window.performanceMonitor.start();
        });

        document.getElementById('stopMonitoring').addEventListener('click', () => {
            window.performanceMonitor.stop();
        });

        document.getElementById('clearData').addEventListener('click', () => {
            window.performanceMonitor.clear();
        });


        // Создаем канал для мониторинга
        const perfChannel = new BroadcastChannel('performance-monitor');

        // Слушаем канал мониторинга
        perfChannel.onmessage = (event) => {
            const { functionName, execTime, timestamp } = event.data;
            window.performanceMonitor.recordExecution(functionName, execTime, timestamp);
        };
    </script>
</body>
</html> 